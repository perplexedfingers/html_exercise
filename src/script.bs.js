// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "../node_modules/rescript/lib/es6/belt_Array.js";
import * as Caml_array from "../node_modules/rescript/lib/es6/caml_array.js";

var rows = [
  [
    0,
    1,
    2
  ],
  [
    3,
    4,
    5
  ],
  [
    6,
    7,
    8
  ]
];

var columns = [
  [
    0,
    3,
    6
  ],
  [
    1,
    4,
    7
  ],
  [
    2,
    5,
    8
  ]
];

var diags = [
  [
    0,
    4,
    8
  ],
  [
    2,
    4,
    6
  ]
];

var lines = Belt_Array.concatMany([
      rows,
      columns,
      diags
    ]);

var game = {
  status: 9,
  current: 1,
  board: Belt_Array.make(9, 0)
};

function isFull(board) {
  return Belt_Array.every(board, (function (cell) {
                return cell !== 0;
              }));
}

function marksInLine(board, index, mark) {
  return Belt_Array.some(Belt_Array.keep(lines, (function (inds) {
                    return Belt_Array.some(inds, (function (ind) {
                                  return ind === index;
                                }));
                  })), (function (inds) {
                return Belt_Array.every(inds, (function (ind) {
                              return Caml_array.get(board, ind) === mark;
                            }));
              }));
}

function computeStatus(board, index, mark) {
  if (marksInLine(board, index, mark)) {
    return mark;
  } else if (isFull(board)) {
    return 10;
  } else {
    return 9;
  }
}

function genCircle(param) {
  var circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
  circle.setAttribute("stroke", "black");
  circle.setAttribute("fill", "transparent");
  circle.setAttribute("stroke-width", (10.0).toString());
  circle.setAttribute("r", (10.0 * 3.5).toString());
  circle.setAttribute("cx", "50%");
  circle.setAttribute("cy", "50%");
  var title = document.createElement("title");
  title.text = "O";
  circle.appendChild(title);
  return circle;
}

function genCross(param) {
  var cross = document.createElementNS("http://www.w3.org/2000/svg", "path");
  cross.setAttribute("stroke", "black");
  cross.setAttribute("fill", "transparent");
  cross.setAttribute("stroke-width", (10.0).toString());
  cross.setAttribute("d", "M 15,15 L 85,85 M 85,15 L 15,85");
  var title = document.createElement("title");
  title.text = "X";
  cross.appendChild(title);
  return cross;
}

function drawMark(node, mark) {
  Belt_Array.forEach(node.childNodes, (function (e) {
          node.removeChild(e);
          
        }));
  var shape = mark === 1 ? genCircle(undefined) : genCross(undefined);
  node.appendChild(shape);
  
}

function markBoard(board, index, mark) {
  Caml_array.set(board, index, mark);
  return board;
}

function celebrate(result) {
  alert("Player " + result + " wins");
  
}

function callDraw(param) {
  alert("Draw game");
  
}

function showResult(result) {
  if (result === 1 || result === 2) {
    celebrate(String(result));
  } else if (result === 10) {
    alert("Draw game");
  }
  
}

function tickFlow(e) {
  e.preventDefault();
  e.stopPropagation();
  if (game.status !== 9) {
    return showResult(game.status);
  }
  var node = e.currentTarget;
  var index = Belt_Array.getIndexBy(Belt_Array.keep(document.querySelector("#board").children, (function (e) {
              return Belt_Array.getBy(e.classList, (function (c) {
                            return c === "cell";
                          })) !== undefined;
            })), (function (e) {
          return e === node;
        }));
  if (index === undefined) {
    return ;
  }
  var board = markBoard(game.board, index, game.current);
  drawMark(node, game.current);
  var status = computeStatus(board, index, game.current);
  game.board = board;
  game.status = status;
  if (game.status === 9) {
    game.current = game.current === 1 ? 2 : 1;
    node.removeEventListener("click", tickFlow);
    return ;
  } else {
    Belt_Array.forEach(document.querySelectorAll("#board > .cell"), (function (cell) {
            cell.addEventListener("click", tickFlow);
            
          }));
    return showResult(game.status);
  }
}

function resetBox(param) {
  return Belt_Array.forEach(document.querySelectorAll("#board > .cell"), (function (cell) {
                Belt_Array.forEach(cell.childNodes, (function (e) {
                        cell.removeChild(e);
                        
                      }));
                cell.addEventListener("click", tickFlow);
                
              }));
}

resetBox(undefined);

function reset(e) {
  e.preventDefault();
  e.stopPropagation();
  game.status = 9;
  game.current = 1;
  game.board = Belt_Array.make(9, 0);
  return resetBox(undefined);
}

document.querySelector("main > button[type='reset']").addEventListener("click", reset);

var draw = 10;

var in_game = 9;

var line_width = 10.0;

export {
  draw ,
  in_game ,
  rows ,
  columns ,
  diags ,
  lines ,
  game ,
  line_width ,
  isFull ,
  marksInLine ,
  computeStatus ,
  genCircle ,
  genCross ,
  drawMark ,
  markBoard ,
  celebrate ,
  callDraw ,
  showResult ,
  tickFlow ,
  resetBox ,
  reset ,
  
}
/* lines Not a pure module */
