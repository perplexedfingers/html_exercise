// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "../node_modules/rescript/lib/es6/belt_Array.js";
import * as Caml_array from "../node_modules/rescript/lib/es6/caml_array.js";

var rows = [
  [
    0,
    1,
    2
  ],
  [
    3,
    4,
    5
  ],
  [
    6,
    7,
    8
  ]
];

var columns = [
  [
    0,
    3,
    6
  ],
  [
    1,
    4,
    7
  ],
  [
    2,
    5,
    8
  ]
];

var diags = [
  [
    0,
    4,
    8
  ],
  [
    2,
    4,
    6
  ]
];

var lines = Belt_Array.concatMany([
      rows,
      columns,
      diags
    ]);

var game = {
  status: 9,
  current: 1,
  board: Belt_Array.make(9, 0)
};

function isFull(board) {
  return Belt_Array.every(board, (function (cell) {
                return cell !== 0;
              }));
}

function marksInLine(board, index, mark) {
  return Belt_Array.some(Belt_Array.keep(lines, (function (inds) {
                    return Belt_Array.some(inds, (function (ind) {
                                  return ind === index;
                                }));
                  })), (function (inds) {
                return Belt_Array.every(inds, (function (ind) {
                              return Caml_array.get(board, ind) === mark;
                            }));
              }));
}

function computeStatus(board, index, mark) {
  if (marksInLine(board, index, mark)) {
    return mark;
  } else if (isFull(board)) {
    return 10;
  } else {
    return 9;
  }
}

var genCircle = (() => {
  const circle = document.createElementNS(
    "http://www.w3.org/2000/svg", "circle"
  );
  circle.setAttribute("stroke", "black");
  circle.setAttribute("fill", "transparent");
  circle.setAttribute("stroke-width", line_width.toString());
  circle.setAttribute("r", (line_width * 3.5).toString());
  circle.setAttribute("cx", "50%");
  circle.setAttribute("cy", "50%");

  const title = document.createElement("title");
  title.text = "O";
  circle.appendChild(title);
  return circle
});

var genCross = (() => {
  const cross = document.createElementNS(
    "http://www.w3.org/2000/svg", "path"
  );
  cross.setAttribute("stroke", "black");
  cross.setAttribute("fill", "transparent");
  cross.setAttribute("stroke-width", line_width.toString());
  cross.setAttribute("d", "M 15,15 L 85,85 M 85,15 L 15,85");

  const title = document.createElement("title");
  title.text = "X";
  cross.appendChild(title);
  return cross
});

var drawMark = ((node, mark) => {
  Array.from(node.childNodes).forEach(e => node.removeChild(e));
  const shape = mark === 1 ? genCircle() : genCross();
  return node.appendChild(shape);
});

function markBoard(board, index, mark) {
  Caml_array.set(board, index, mark);
  return board;
}

var celebrate = ((result) => alert("Player " + result.toString() + " wins"));

var callDraw = (() => alert("Draw game"));

const showResult = (result) => {
  if (result === 1 || result === 2) {
    celebrate(result);
  } else if (result === draw) {
    callDraw();
  }
};

const tickFlow = (e) => {
  e.preventDefault();
  e.stopPropagation();

  if (game.status === in_game) {
    const node = e.currentTarget;
    const index = Array
      .from(document
        .querySelector("#board").children)
      .filter(e => Array.from(e.classList).includes("cell"))
      .findIndex(e => e === node);
    if (index !== -1 && game.board[index] === 0) {
      const board = markBoard(game.board, index, game.current);
      drawMark(node, game.current);
      const status = computeStatus(board, index, game.current);

      game.board = board;
      game.status = status;
      if (game.status === in_game) {
        game.current = game.current === 1? 2 : 1;
        node.removeEventListener("click", tickFlow);
      } else {
        document.querySelectorAll("#board > .cell")
          .forEach(cell => cell.removeEventListener("click", tickFlow));
        showResult(game.status);
      }
    } else {
      // TODO show notification?
    }
  } else {
    showResult(game.status);
  }
};

const resetBox = () => {
  document.querySelectorAll("#board > .cell")
    .forEach(cell => {
      Array.from(cell.childNodes).forEach(e => cell.removeChild(e))
      cell.addEventListener("click", tickFlow)
    });
}


resetBox();  // set up boxes


const reset = (e) => {
  e.preventDefault();
  e.stopPropagation();

  game.status = in_game;
  game.current = 1;  // 1 for Circle; 2 for Cross
  game.board = [
    0, 0, 0,
    0, 0, 0,
    0, 0, 0
  ];

  resetBox();
};

document.querySelector("main > button[type='reset']")
  .addEventListener("click", reset);
;

var draw = 10;

var in_game = 9;

var line_width = 10;

export {
  draw ,
  in_game ,
  rows ,
  columns ,
  diags ,
  lines ,
  game ,
  line_width ,
  isFull ,
  marksInLine ,
  computeStatus ,
  genCircle ,
  genCross ,
  drawMark ,
  markBoard ,
  celebrate ,
  callDraw ,
  
}
/* lines Not a pure module */
